{"version":3,"file":"0.js","sources":["webpack:///./components/DialogFormConfirm/index.js"],"sourcesContent":["import Avatar from \"@material-ui/core/Avatar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport LocalStorageHandler from \"../LocalStorageHandler\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  \"@global\": {\r\n    body: {\r\n      backgroundColor: theme.palette.common.white\r\n    }\r\n  },\r\n  root: {\r\n    textAlign: \"center\"\r\n  },\r\n  paper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\"\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction SignIn(props) {\r\n  const inputRef = useRef();\r\n\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [_emailOrFone, set_EmailOrFone] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!isEditing) {\r\n      inputRef.current.focus();\r\n      setEditing(!0);\r\n    }\r\n  }, [isEditing]);\r\n\r\n  const classes = useStyles();\r\n\r\n  /**\r\n   * Define o email ou celular do cliente:\r\n   */\r\n  useEffect(() => {\r\n    props.emailOrPhone(_emailOrFone);\r\n  }, [_emailOrFone]);\r\n\r\n  /**\r\n   * Define o endereço:\r\n   */\r\n  useEffect(() => {\r\n    props.endereco(address);\r\n  }, [address]);\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            onChange={ev => set_EmailOrFone(ev.target.value)}\r\n            required\r\n            fullWidth\r\n            type=\"text\"\r\n            id=\"email\"\r\n            label=\"Email ou Telefone\"\r\n            name=\"email\"\r\n            autoFocus\r\n            inputRef={inputRef}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            onChange={ev => setAddress(ev.target.value)}\r\n            fullWidth\r\n            name=\"endereco\"\r\n            label=\"Endereco\"\r\n            type=\"text\"\r\n            id=\"endereco\"\r\n          />\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nvar ws = null;\r\n\r\nexport default function SimpleDialog(props) {\r\n\r\n  const { onClose, open } = props;\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const classes = useStyles();\r\n\r\n  const [isConnected, setConnected] = useState(false);\r\n  const [emailOrFone, setEmailOrFone] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n\r\n  function handleClose() {\r\n    onClose(true);\r\n  }\r\n\r\n  function startChat() {\r\n    ws = adonis.Ws(\"ws://127.0.0.1:3333\").connect();\r\n\r\n    ws.on(\"open\", () => {\r\n      console.log(\"connected\");\r\n      subscribeToChannel();\r\n    });\r\n\r\n    ws.on(\"error\", () => {\r\n      console.log(\"connected\");\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isConnected == false) {\r\n      startChat();\r\n      setConnected(true);\r\n    }\r\n  }, [isConnected]);\r\n\r\n  function subscribeToChannel() {\r\n    const chat = ws.subscribe(\"chat\");\r\n\r\n    chat.on(\"error\", () => {\r\n      console.log(\"connected\");\r\n    });\r\n\r\n    chat.on(\"message\", message => {\r\n      console.log(JSON.stringify(message));\r\n    });\r\n  }\r\n\r\n  var id = 0;\r\n\r\n  function enviarPedido() {\r\n    ++id;\r\n\r\n    ws.getSubscription(\"chat\").emit(\"message\", {\r\n      id_client: id,\r\n      username: emailOrFone,\r\n      address: address,\r\n      amount: LocalStorageHandler.getDataByKey(\"products\").length,\r\n      demand: JSON.stringify(LocalStorageHandler.getDataByKey(\"products\")),\r\n    });\r\n    LocalStorageHandler.remove(\"products\");\r\n    onClose(!0);\r\n  }\r\n\r\n  return (\r\n    <Dialog fullScreen={fullScreen} open={open} onClose={handleClose}>\r\n      <DialogTitle id=\"responsive-dialog-title\" className={classes.root}>\r\n        <Box justifyContent=\"center\">Concluir Pedido</Box>\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <Typography>\r\n          Verificaremos que você não está logado ou que não possui uma conta,\r\n          então, para proseguir, digite seu número de telefone e endereço, e o\r\n          seu pedido será feito.\r\n        </Typography>\r\n        <SignIn\r\n          emailOrPhone={emailOrFone => {\r\n            setEmailOrFone(emailOrFone);\r\n          }}\r\n          endereco={address => {\r\n            setAddress(address);\r\n          }}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"default\" variant=\"contained\">\r\n          Fechar\r\n        </Button>\r\n        <Button\r\n          onClick={enviarPedido}\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          autoFocus\r\n        >\r\n          Confirmar\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAFA;AAlBA;AAAA;AACA;AAuBA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;AAGA;AACA;AACA;AAEA;;;;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAesourceRoot":""}